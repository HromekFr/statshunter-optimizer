name: Run Tests

on:
  push:
    branches: [ master, main, develop, feature/* ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Create .env file for tests
      run: |
        echo "# Test environment variables" > .env
        echo "STATSHUNTERS_API_KEY=${{ secrets.STATSHUNTERS_API_KEY || 'test_key' }}" >> .env
        echo "ORS_API_KEY=${{ secrets.ORS_API_KEY || 'test_ors_key' }}" >> .env
        echo "MAPY_API_KEY=${{ secrets.MAPY_API_KEY || 'test_mapy_key' }}" >> .env
        echo "HOST=0.0.0.0" >> .env
        echo "PORT=8000" >> .env
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}
    
    - name: Test routing services
      run: |
        cd tests
        python -m unittest test_routing_services.TestMapyWaypointReducer -v
    
    - name: Test API endpoints
      run: |
        cd tests
        python -m unittest test_api_endpoints.TestAPIEndpoints -v
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy (optional)
      continue-on-error: true
      run: |
        pip install mypy
        mypy backend --ignore-missing-imports
    
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "Python Version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "Test Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Create .env file
      run: |
        echo "STATSHUNTERS_API_KEY=${{ secrets.STATSHUNTERS_API_KEY || 'test_key' }}" > .env
        echo "ORS_API_KEY=${{ secrets.ORS_API_KEY || 'test_key' }}" >> .env
        echo "MAPY_API_KEY=${{ secrets.MAPY_API_KEY || 'test_mapy_key' }}" >> .env
    
    - name: Start server
      run: |
        cd backend
        python main.py &
        sleep 5
    
    - name: Test server health
      run: |
        curl -f http://localhost:8000/api/health || exit 1
    
    - name: Test routing services endpoint
      run: |
        curl -f http://localhost:8000/api/routing-services || exit 1
    
    - name: Stop server
      if: always()
      run: |
        pkill -f "python main.py" || true